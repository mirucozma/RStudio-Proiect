options = popupOptions(closeButton = FALSE))
addMarkers(lng = -76.61289, lat = 39.29793,
label = "Label with custom style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "red", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
addRectangles(
lng1=-76.5929798, lat1=39.2973166,
lng2=-76.6206598, lat2=39.3288851,
fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = -76.61289, lat = 39.29793,
label = "Label with custom style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "red", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
#install.packages("leaflet")
library(leaflet)
# Data for the leaflet
df1 <- data.frame(lng=47.654288, lat=-336.43426)
df2 <- data.frame(
lat = c(47.787326, 47.656138, 46.79968),
lng = c(-337.131958, -336.434326, -336.412354),
Description=c("Loc1","Loc2","Loc3"),
Size=c(900, 500, 100))
df3 <-read.csv("C:/Users/Miruna PC/OneDrive/Documents/R/Proiect/pk.csv")
# Add Color Pallete for categorical input
pallete <- colorFactor(
palette = c('red', 'purple', 'pink'),
domain = df2$Description
)
# or
pal <- colorFactor(
palette = 'Set2',
domain = df2$Description
)
# Add Color Pallete for continuous input
Contpallete <- colorQuantile("YlOrRd", df2$Size, n = 3)
# Adding html based popup information
content <- paste(sep = "<br/>",
"Proiect",
"Medii"
)
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
#addRectangles(
#  lng1=-76.5929798, lat1=39.2973166,
#  lng2=-76.6206598, lat2=39.3288851,
#  fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = -76.61289, lat = 39.29793,
label = "Label with custom style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "red", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map  # Print the map
#install.packages("leaflet")
library(leaflet)
# Data for the leaflet
df1 <- data.frame(lng=47.654288, lat=-336.43426)
df2 <- data.frame(
lat = c(47.787326, 47.656138, 46.79968),
lng = c(-337.131958, -336.434326, -336.412354),
Description=c("Loc1","Loc2","Loc3"),
Size=c(900, 500, 100))
df3 <-read.csv("C:/Users/Miruna PC/OneDrive/Documents/R/Proiect/pk.csv")
# Add Color Pallete for categorical input
pallete <- colorFactor(
palette = c('red', 'purple', 'pink'),
domain = df2$Description
)
# or
pal <- colorFactor(
palette = 'Set2',
domain = df2$Description
)
# Add Color Pallete for continuous input
Contpallete <- colorQuantile("YlOrRd", df2$Size, n = 3)
# Adding html based popup information
content <- paste(sep = "<br/>",
"Proiect",
"Medii"
)
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
#addRectangles(
#  lng1=-76.5929798, lat1=39.2973166,
#  lng2=-76.6206598, lat2=39.3288851,
#  fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = 47.591346, lat = 22.873535,
label = "Nord Vest",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "red", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map  # Print the map
#install.packages("leaflet")
library(leaflet)
# Data for the leaflet
df1 <- data.frame(lng=47.654288, lat=-336.43426)
df2 <- data.frame(
lat = c(47.787326, 47.656138, 46.79968),
lng = c(-337.131958, -336.434326, -336.412354),
Description=c("Loc1","Loc2","Loc3"),
Size=c(900, 500, 100))
df3 <-read.csv("C:/Users/Miruna PC/OneDrive/Documents/R/Proiect/pk.csv")
# Add Color Pallete for categorical input
pallete <- colorFactor(
palette = c('red', 'purple', 'pink'),
domain = df2$Description
)
# or
pal <- colorFactor(
palette = 'Set2',
domain = df2$Description
)
# Add Color Pallete for continuous input
Contpallete <- colorQuantile("YlOrRd", df2$Size, n = 3)
# Adding html based popup information
content <- paste(sep = "<br/>",
"Proiect",
"Medii"
)
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
#addRectangles(
#  lng1=-76.5929798, lat1=39.2973166,
#  lng2=-76.6206598, lat2=39.3288851,
#  fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = 22.873535, lat = 47.591346,
label = "Nord Vest",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "red", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map  # Print the map
#install.packages("leaflet")
library(leaflet)
# Data for the leaflet
df1 <- data.frame(lng=47.654288, lat=-336.43426)
df2 <- data.frame(
lat = c(47.787326, 47.656138, 46.79968),
lng = c(-337.131958, -336.434326, -336.412354),
Description=c("Loc1","Loc2","Loc3"),
Size=c(900, 500, 100))
df3 <-read.csv("C:/Users/Miruna PC/OneDrive/Documents/R/Proiect/pk.csv")
# Add Color Pallete for categorical input
pallete <- colorFactor(
palette = c('red', 'purple', 'pink'),
domain = df2$Description
)
# or
pal <- colorFactor(
palette = 'Set2',
domain = df2$Description
)
# Add Color Pallete for continuous input
Contpallete <- colorQuantile("YlOrRd", df2$Size, n = 3)
# Adding html based popup information
content <- paste(sep = "<br/>",
"Proiect",
"Medii"
)
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
#addRectangles(
#  lng1=-76.5929798, lat1=39.2973166,
#  lng2=-76.6206598, lat2=39.3288851,
#  fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = 22.873535, lat = 47.591346,
label = "Nord Vest",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "pink", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map  # Print the map
#install.packages("leaflet")
library(leaflet)
# Data for the leaflet
df1 <- data.frame(lng=47.654288, lat=-336.43426)
df2 <- data.frame(
lat = c(47.787326, 47.656138, 46.79968),
lng = c(-337.131958, -336.434326, -336.412354),
Description=c("Loc1","Loc2","Loc3"),
Size=c(900, 500, 100))
df3 <-read.csv("C:/Users/Miruna PC/OneDrive/Documents/R/Proiect/pk.csv")
# Add Color Pallete for categorical input
pallete <- colorFactor(
palette = c('red', 'purple', 'pink'),
domain = df2$Description
)
# or
pal <- colorFactor(
palette = 'Set2',
domain = df2$Description
)
# Add Color Pallete for continuous input
Contpallete <- colorQuantile("YlOrRd", df2$Size, n = 3)
# Adding html based popup information
content <- paste(sep = "<br/>",
"Proiect",
"Medii"
)
prepare_map <-  df2 %>% leaflet() %>%
#addTiles() %>%
#setView(lng = -76.5929798, lat = 39.2973166, zoom = 12)  %>%
addProviderTiles(providers$MtbMap, group = 'MtbMAP') %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35), group = 'Tonerlines')  %>%
addProviderTiles(providers$Stamen.TonerLabels,group = 'TonerLabels') %>%
#addMarkers(lat=df2$lat, lng= df2$lng, popup=df2$Description,
#           clusterOptions = markerClusterOptions()) %>%
addLabelOnlyMarkers(~lng, ~lat, label =  df2$Description,
labelOptions = labelOptions(noHide = T, direction = 'top'
,textOnly = T)) %>%
#addCircleMarkers(color= "red", lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions())
#addCircleMarkers(color= ~pallete(Description), lat=~lat, lng= ~lng,
#                 clusterOptions = markerClusterOptions(),
#                 #radius = ~ifelse(Description == "Place1", 26, 10),
#                 radius = ~sqrt(Size),
#                 stroke = FALSE, fillOpacity = 0.5) %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
popup = ~Description, radius = ~sqrt(Size)*15,
color = ~Contpallete(Size), fillOpacity = 1, group = "df2") %>%
addLegend("bottomright", pal = Contpallete, values = ~Size,
title = "Size", opacity = 1) %>%
#addRectangles(
#  lng1=-76.5929798, lat1=39.2973166,
#  lng2=-76.6206598, lat2=39.3288851,
#  fillColor = "transparent")  %>%
#addPopups(lng=-76.61289, lat=39.29793, content,
#           options = popupOptions(closeButton = FALSE))
addMarkers(lng = -337.044067, lat = 47.433661 ,
label = "Nord Vest",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "15px",
"border-color" = "rgba(0,0,0,0.5)"
))) %>%
addPolygons(data = df2, lng = ~lng, lat = ~lat,
fill = F, weight = 2, color = "pink", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("MtbMAP", "Tonerlines", "TonerLabels"),
overlayGroups = c("df2", "Outline"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure(position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE) %>% addScaleBar()
prepare_map  # Print the map
library(shiny); runApp('prroiect.R')
library(shiny); runApp('prroiect.R')
